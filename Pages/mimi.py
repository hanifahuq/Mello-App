import streamlit as st
import openai
import os
from dotenv import load_dotenv


def display_mimi():
    
    # Load environment variables from the .env file
    load_dotenv()

    # Access the OpenAI API key
    openai.api_key = os.getenv('OPENAI_API_KEY')

    if openai.api_key:
        print(f"OpenAI API Key loaded successfully!")
    else:
        print("Error: OpenAI API Key not found!")

    # Initialize question count and history in session state
    if 'question_count' not in st.session_state:
        st.session_state['question_count'] = 0

    if 'history' not in st.session_state:
        st.session_state['history'] = {}

    # Function to send the prompt and get a CBT-specific response
    def get_completion(prompt, model="gpt-4o-mini", temperature=0.7):
        """
        Sends a prompt to the specified language model and returns the model's CBT-based response.
        
        Parameters:
        - prompt (str): The input prompt containing the user's statement or question.
        - model (str): The model to be used for generating the completion.
        - temperature (float): Controls the randomness of the output.
        
        Returns:
        - str: The content of the response generated by the model, based on CBT principles.
        """
        messages = [
            {"role": "system", "content": """
                You are a therapist specialized in Cognitive Behavioral Therapy (CBT). 
                Your goal is to help the user manage negative thoughts and emotions by 
                applying CBT principles, including cognitive restructuring, behavioral activation, 
                and Socratic questioning. Offer supportive, thoughtful responses and help the user 
                reframe unhelpful thoughts.
            """},
            {"role": "user", "content": prompt}
        ]

        # Sends a request to the OpenAI API with the specified parameters
        response = openai.ChatCompletion.create(
            model=model,
            messages=messages,
            temperature=temperature
        )

        # Returns the content of the response generated by the model
        return response.choices[0].message['content']

    # Streamlit app interface
    # Add custom CSS to center the title and change font size
    st.markdown(
        """
        <style>
        .title {
            text-align: center;
            font-size: 50px;  /* Increased font size for the title */
        }
        blockquote {
            font-size: 28px;  /* Increased font size for the quote */
            padding: 20px;
            line-height: 1.6; /* Adjust line height for better readability */
        }
        </style>
        """, unsafe_allow_html=True
    )

    # Use the class to center the title
    st.markdown('<h1 class="title">  Mimi </h1>', unsafe_allow_html=True)

    st.write("Mimi provides guidance based on Cognitive Behavioral Therapy (CBT) techniques.")

    # Check if the user has asked fewer than 10 questions
    if st.session_state['question_count'] < 10:
        
        # User input field
        user_input = st.text_input("How can I help you today?", "")

        # Limit the input text to 200 characters
        max_chars = 200
        if len(user_input) > max_chars:
            st.warning(f'You input exceeds the {max_chars} character limit. Please shorten your input.')
            user_input = user_input[:max_chars] #trim input to max_chars length
        
        # Once the user provides input, we send it to the OpenAI API using the get_completion function
        if user_input:
            # Increment the question count
            st.session_state['question_count'] += 1
            
            # Check if the question was previously asked
            if user_input in st.session_state['history']:
                response = st.session_state['history'][user_input]
            else:
                # Get the chatbot's response using the OpenAI API
                response = get_completion(prompt=user_input, model="gpt-4o-mini", temperature=0.7)
                
                # Save the new question and response to history
                st.session_state['history'][user_input] = response

            # Display the chatbot's response in the app
            st.text_area("Mimi:", value=response, height=200)

            # Show how many questions the user has left
            st.write(f"Questions left: {10 - st.session_state['question_count']}")
        
    else:
        # Display a message if the user has reached the question limit
        st.write("You have reached the limit of 10 questions for this session.")

    # Disclaimer
    st.write("Disclaimer: This chatbot is for educational purposes only and is not a substitute for professional mental health treatment.")
